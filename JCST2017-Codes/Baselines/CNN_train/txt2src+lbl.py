import os
import sys
import random
import string
import math
from gensim import corpora

import gensim
import gensim.models as gm

maxLine = int(float(sys.argv[1]))
err_file = str(sys.argv[2])	# err_file
lbl_file = str(sys.argv[3])
save_path = str(sys.argv[4])
sharedFile = str(sys.argv[5])
logFile = str(sys.argv[6])

"""
This script now only serves the purpose of 
1. partitioning source and label file generated by Att system
2. writing epoch number to shared file
"""

# log = open(logFile,"a+")
# log.write("------Generating Source Texts(with error) and Labels------\n")
# log.write("Total lines in one file: " + str(maxLine) + "\n")
# log.write("Processing files with name: " + str(head_file_name_match) + "*.txt\n")
# log.write("Dictionary being used: " + str(dict_file) + "\n")
# log.write("Model being used: " + str(model_file) + "\n")
# log.write("Shared value file: " + str(sharedFile) + "\n")
# log.write("Files saved to: " + str(save_path) + "\n")
# log.flush()

tok = []

# save_file = "{}{}.pkl".format(save_path,file_name.split('/')[-1].split('.')[0])
# confus = AErrors_multiPOS.build_confus(file_name, save_file)
# print("Confusion Set built.")

lineCount = 0
fileCount = 0

# os.system("mkdir " + save_path)

# divide texts into files with fixed number of sentences(except the last file)
# and randomly replace a word with a wrong one in each sentence
# print("Processing file: " + err_file + "\n")
# log.write("Processing file: " + file_name + "\n")
# iterating over files
with open(err_file, "r") as corr:
	lbl_orig =  open(lbl_file,"r")
	# iterating over lines
	for line in corr:
		lineCount += 1
		# lineCount % maxLine == 1 indicates the start of a new file
		if lineCount%maxLine == 1:
			fileCount += 1
			err = open(save_path + str(fileCount) + "_source.txt", "w+")
			lbl = open(save_path + str(fileCount) + "_label.csv", "w+")
		labels = lbl_orig.readline().split()
		err.write(line)
		for label in labels:
			lbl.write(str(label)+"\n")
		# lineCount % maxLine == 0 indicates reaching the maximum line count of a single file
		if lineCount%maxLine == 0:
			err.close()
			lbl.close()
	# for the last file, if it does not reach the maximum line count, close it
	if lineCount%maxLine != 0:
		err.close()
		lbl.close()
print("Total label file number: " + str(fileCount) + "\n")
# log.write("Total label file number: " + str(fileCount) + "\n")

# log.write("------End Generating Source Texts(with error) and Labels------\n")
# log.flush()
# log.close()

shared = open(sharedFile, "w+")
shared.write(str(fileCount))
shared.close()